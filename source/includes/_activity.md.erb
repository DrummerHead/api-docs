# Activity

The activity gem provides the DSL to define workflows, and the runtime objects to execute the latter.

## Overview

```ruby
<%= snippet :activity, :overview %>
```
> Invoking an activity works via its `call` method. The `ctx` parameter can be any kind of data structure.

```ruby
<%= snippet :activity, "overview-call" %>
```

> After the activity finishes, you can access computed data via the returned `ctx` object. The `signal` is the end _event_ the activity stopped at.

```ruby
<%= snippet :activity, "overview-result" %>
```

An activity defines a workflow for a specific business process. This can be any level of granularity, from the entire lifecycle of a user object, or validating and persisting input from a form, down to parsing and coercing a specific fragment from a document. In Trailblazer, activities are the major building block for logic.

Per convention, activities are `module`s and not classes. A module in Ruby is just a namespace and not automatically supposed to be used as a mixin, which we refrain from. Instead, think of an activity module as a `module` in Elixir, which is simply a collection of stateless functions. Modules have two major benefits.

* You can not subclass actitivies. This might sound counter-intuitive, but activity gives you the much more sustainable tool of compositions.
* Modules provide `module_function` to declare every method as a class method. This makes the module more readable and allows to use `method` to attach a module method to a step.

### Example

In the exemplary `Memo::Update` activity, the first line extends your module and imports the DSL. Activity ships with three built-in strategies to build workflows: `Path` is designed for more linear flows, `Railway` is the [railway-oriented](https://fsharpforfunandprofit.com/rop/) two tracks flow, and `FastTrack` is the extended railway with two more "fast" tracks which was tried and tested in Trailblazer for two years and more.

In the upper part sits the implementation of the actual steps. Note that these don't have to be located in the same module or class as the activity definition - this is just convenient in many cases. All methods expose the _step interface_, which is the default.

In the lower part, the actual DSL defines the activity's flow. Check out the rendered diagram, it helps to understand the DSL.

<img src="/images/activity-overview.png" >

Each box in this diagram is called a task or step. Each is represented by a callable object you provide. The next outgoing line is determined by checking the result of the task: A task following the _step interface_ returns `trusy` of `falsey` and thus instructs the activity what way to choose from here.

## Anatomy

An activity is a set of tasks, with at least one start event and one or multiple end events. A task can be any Ruby callable that follows the _task interface_, and even another activity itself.

<img src="/images/activity-anatomy-1.png" >

In other words, an activity is a container, and tasks are the boxes contained in it. What you see above is actually an incorrect representation, as it doesn't name outputs or signals. We use it all the time, though, since those outputs can be inferred easily. Intuitively, you understand what this activity will do, and that the `save` task can have a successful and a failing outcome.

***We found the [BPMN specification](http://www.bpmn.org/) to be very elegant for describing business processes, that's why Trailblazer picked up a subset of its lingo and concepts. The way we've integrated TRB and BPMN is straight-forward, so you're not required to [read 538 pages specs](http://www.omg.org/spec/BPMN/2.0/PDF).***

Here's a another representation of a different activity, one that uses the above activity we just defined as a nested task.

<img src="/images/activity-anatomy-2.png" >

Nested activities (in BPMN they're called _subprocess_), are marked by the `[+]` symbol in the box. As you can see, both outgoing connections from the nested `<update>` activity need to be wired to _something_ in the outer workflow. In this example, the "failure" output of the nested `<update>` activity is wired to the `End.failure` end event.

Let's look at this diagram again, with correct annotations, outputs and semantics. All those new terms will become a bit clearer in a bit.

<img src="/images/activity-anatomy-3.png" >

Oh, wow, that's actually more confusing. Anyway, this diagram contains all annotations used in Trailblazer's activities: outputs with semantic and signals. For a better understanding of the whole picture we should break it down to one task, first.

<img src="/images/activity-anatomy-4.png" >

> The `policy` task returning a specific signal. This is the low-level version of a task, called the _task interface_.

```ruby
def policy( (ctx, flow_options), **)
  signal = ctx[:current_user].nil? ?
    Trailblazer::Activity::Left :
    Trailblazer::Activity::Right

  return signal, [ctx, flow_options]
end
```


A task can have different outputs. Every output is defined by a _semantic_ (for example `:success`) and a _signal_.

Both semantic and signal are completely arbitrary and you can use whatever you feel makes sense. Historically, Trailblazer uses the `Right` signal for outputs with the `:success` semantic, and `Left` for `:failure`. Also note that even the semantic (e.g. `:success`) doesn't have any meaning except for the modelling. And you can have as many outputs as you need from a task.

Now, why not relate this to some code? Remember, a plain task is always a piece of Ruby code. The task can pick what output to take by returning the output's respective signal.


***Note that the terms _output_ and _semantic_ are inventions of Trailblazer and not part of BPMN.***

With nested activities, it's slightly different. Since the last task will be an end event, it's this very end event to decide what signal to emit. End events always [return themselves as the signal](#activity-event).

### Outputs and Semantics

```ruby
module Memo::Create
  extend Trailblazer::Activity::Path()

  task method(:policy),
    Output(:failure) => "log_error"
  task method(:log_error), id: "log_error", magnetic_to: [],
    Output(:success) => End(:policy_failure)
end
```

> Both tasks could be wired without knowing what signal they emit, just by referencing standard semantics of their outputs.


Having defined tasks with outputs, where an output emits a specific signal, an activity modeller's job is now to specify what output gets connected to what further connection.

This is where the semantic of an output comes into play. A modeller can connect, say, the `:failure` output of a task with an error handler, and then with an erroring end event, without knowing about the underlying signals. This allows Trailblazer to expose a generic modelling API.

<img src="/images/activity-anatomy-5.png" >

All mentioned modelling concepts will be explained in detail in the following sections.


### Definition

SomeModule.method(:find)


### Call

## DSL

## Event

> Always build end instances via the `End` builder.

```ruby
evt = Trailblazer::Activity::End( semantic: :success_story )
```

> The returned signal is `evt` itself.

```ruby
signal, (ctx, flow_options) = evt.( [ctx, flow_options] )
signal #=> #<Trailblazer::Activity::End semantic=:success_story>
```

> Use `Event#to_h` to decompose.

```ruby
evt.to_h #=> { semantic: :success_story }
```


Events are tasks with special semantics.

* `Start` events do nothing, and always return the `Right` signal. Every activity begins with one or multiple start events.
* `End` events usually don't execute anything, either. An end event instance always returns itself as the signal. This allows to wire them to ongoing connections when nesting. End events mark the end of activity paths, and might also be used for suspending an activity as we do [in the `workflow` gem](#workflow).


## Path

### Join

```ruby
<%= snippet :activity, "join", hide: "methods", file: "docs/path_test.rb" %>
```

An extra path can be joined with the outer activity by pointing the last (or any other) task to an existing task in the outer activity.

<img src="/images/path-join.png" >

Only when `find` returns the `Left` signal, the extra path is taken.
