# Activity

The activity gem provides the DSL to define workflows, and the runtime objects to execute the latter.

## Overview

```ruby
<%= snippet :activity, :overview %>
```
> Invoking an activity works via its `call` method. The `ctx` parameter can be any kind of data structure.

```ruby
<%= snippet :activity, "overview-call" %>
```

> After the activity finishes, you can access computed data via the returned `ctx` object. The `signal` is the end _event_ the activity stopped at.

```ruby
<%= snippet :activity, "overview-result" %>
```

An activity defines a workflow for a specific business process. This can be any level of granularity, from the entire lifecycle of a user object, or validating and persisting input from a form, down to parsing and coercing a specific fragment from a document. In Trailblazer, activities are the major building block for logic.

Per convention, activities are `module`s and not classes. A module in Ruby is just a namespace and not automatically supposed to be used as a mixin, which we refrain from. Instead, think of an activity module as a `module` in Elixir, which is simply a collection of stateless functions. Modules have two major benefits.

* You can not subclass actitivies. This might sound counter-intuitive, but activity gives you the much more sustainable tool of [compositions](#activity-composition).
* Modules provide `module_function` to declare every method as a class method. This makes the module more readable and allows to use `method` to attach a module method to a step.

### Example

In the exemplary `Memo::Update` activity, the first line extends your module and imports the DSL. Activity ships with three built-in strategies to build workflows: `Path` is designed for more linear flows, `Railway` is the [railway-oriented](https://fsharpforfunandprofit.com/rop/) two tracks flow, and `FastTrack` is the extended railway with two more "fast" tracks which was tried and tested in Trailblazer for two years and more.

In the upper part sits the implementation of the actual steps. Note that these don't have to be located in the same module or class as the activity definition - this is just convenient in many cases. All methods expose the _step interface_, which is the default.

In the lower part, the actual DSL defines the activity's flow. Check out the rendered diagram, it helps to understand the DSL.

<img src="/images/activity-overview.png" >

The following principles apply.

* Each box in this diagram is called a task or step, depending on its interface, but we're not too strict here.
* Each box - in code - is represented by a callable object you provide (usually that's a `method` as seen to the right, or another nested `Activity`).
* Depending on the return value of the task code, the next connection is picked.
* Per default, the `ctx` object is passed through from task to task and allows to write state.
* An activity stops when hitting an end event.

Activities are incredibly simple, even though the DSL might look very powerful. Don't worry, the DSL code is completely separated from the run-time code, and you only need to understand a handful of concepts such as task- and step interface, outputs, semantics, and colors (also known as _polarizations_) and you will be able to write and maintain more complex workflows easily.

## Anatomy

An activity is a set of tasks, with at least one start event and one or multiple end events. A task can be any Ruby callable that follows the [_task interface_](#activity-task-interface), and it can even be another activity itself.

<img src="/images/activity-anatomy-1.png" >

In other words, an activity is a container, and tasks are the boxes contained in it. What you see above is actually an incorrect representation, as it doesn't name outputs or signals. We use it all the time, though, since those outputs can be inferred easily. Intuitively, you understand what this activity will do, and that the `save` task can have a successful and a failing outcome.

***We found the [BPMN specification](http://www.bpmn.org/) to be very elegant for describing business processes, that's why Trailblazer picked up a subset of its lingo and concepts. The way we've integrated TRB and BPMN is straight-forward, so you're not required to [read 538 pages specs](http://www.omg.org/spec/BPMN/2.0/PDF).***

Here's a another representation of a different activity, one that uses the above activity we just defined as a nested task.

<img src="/images/activity-anatomy-2.png" >

Nested activities (in BPMN they're called _subprocess_), are marked by the `[+]` symbol in the box. As you can see, both outgoing connections from the nested `<update>` activity need to be wired to _something_ in the outer workflow. In this example, the "failure" output of the nested `<update>` activity is wired directly to the `End.failure` end event.

Let's look at this diagram again, with correct annotations, outputs and semantics. All those new terms will become a bit clearer in a bit.

<img src="/images/activity-anatomy-3.png" >

Oh, wow, that's actually more confusing. Anyway, this diagram contains all annotations used in Trailblazer's activities: outputs with semantic and signals. For a better understanding of the whole picture we should break it down to one task, first.

<img src="/images/activity-anatomy-4.png" >

> The `policy` task returning a specific signal. This is the low-level version of a task, called the _task interface_.

```ruby
def policy( (ctx, flow_options), **)
  signal = ctx[:current_user].nil? ?
    Trailblazer::Activity::Left :
    Trailblazer::Activity::Right

  return signal, [ctx, flow_options]
end
```


A task can have different outputs. Every output is defined by a _semantic_ (for example `:success`) and a _signal_.

Both semantic and signal are completely arbitrary and you can use whatever you feel makes sense. Historically, Trailblazer uses the `Right` signal for outputs with the `:success` semantic, and `Left` for `:failure`. Also note that even the semantic (e.g. `:success`) doesn't have any meaning except for the modelling. Oh, and you're not limited to two outputs: a task may have as many outputs as you need.

Now, why not relate this to some code? Remember, a plain task is always a piece of Ruby code. The task can pick what output to take by returning the output's respective signal.


***Note that the terms _output_ and _semantic_ are inventions of Trailblazer and not part of BPMN.***

With nested activities, it's slightly different. Since the last task will be an end event, it's this very end event to decide what signal to emit. End events always [return themselves as the signal](#activity-event). This allows to wire a nested activity's ends to specific paths in the outer diagram, the way we've modelled it in the example above and in the next paragraph.

### Outputs and Semantics

```ruby
module Memo::Create
  extend Trailblazer::Activity::Path()

  task method(:policy),
    Output(:failure) => "log_error"
  task method(:log_error), id: "log_error", magnetic_to: [],
    Output(:success) => End(:policy_failure)
end
```

> Both tasks could be wired without knowing what signal they emit, just by referencing standard semantics of their outputs.


Having defined tasks with outputs, where an output emits a specific signal, an activity modeller's job now is to specify what output gets connected to what further connection.

This is where the semantic of an output comes into play. A modeller can connect, say, the `:failure` output of a task with an error handler, and then with an erroring end event, without knowing about the underlying signals. This allows Trailblazer to expose a generic modelling API.

<img src="/images/activity-anatomy-5.png" >

All mentioned modelling concepts will be explained in detail in the following sections.


## Output


The entire DSL is only about outputs, or about connecting outputs to tasks, to be more accurate. That's why we spend a lot of time working out the best way to model activities.

<!-- @nutshell -->
***An output is mostly represented by a circle sitting on the box's edge. It is defined as a tuple of signal along with a semantic. We often write outputs in diagrams like `<Signal>:semantic`. The task's Ruby code can pick what output to take by returning the specific signal.***

Sometimes, we omit the circle and just annotate the outgoing arrow with the signal tuple.

> A task can return any signal with the task interface.
 The signal dictates which physical output to take.

```ruby
def policy( (ctx, flow_options), **)
  signal = ctx[:current_user].nil? ?
    Trailblazer::Activity::Left :
    Trailblazer::Activity::Right

  return signal, [ctx, flow_options]
end
```

> The DSL automatically assigns default outputs if none are specified.

```ruby
module Memo::Create
  extend Trailblazer::Activity::Railway() # we're using the Railsway here

  step method(:policy)
  #=> defaults:
  # outputs: {
  #   success: Output{<Right>:success},
  #   failure: Output{<Left>:failure}
  # }
end
```

<img src="/images/output-versions.png" >

On the right-hand side, you see a `policy` task that returns either a `Right` or a `Left` signal. Remember, tasks can return just anything as a signal. Since for callable Ruby objects (which is what tasks are), there's no way to define what outputs a task comes with, it's the DSL's job to define a set of outputs of a specific task.

The example only works because the DSL automatically assigns outputs if none are given.

When using `task` or other DSL methods to add a task, depending on the strategy, the DSL will automatically provide default outputs as you see on the right. Since, now, the outputs are provided, the DSL strategy will now automatically connect the outputs to the next task.

For example, with `Path()`, a `:success` output will be wired to the next `task` call. In a `Railway`, the same happens, plus a `:failure` output will be connected to the error track for you.

<!-- @notoc -->
## Output: Defaults for Plain Task

> With `Path()`, the `task` method defaults `:outputs` to one `:success` output (left diagram).

```ruby
module Memo::Create
  extend Trailblazer::Activity::Path()

  task method(:policy) #, outputs: { success: Output{<Right>:success} }
end
```

> With `Railway()`, the default outputs will be `Right` and `Left` (middle diagram).

```ruby
module Memo::Create
  extend Trailblazer::Activity::Railway() # we're using the Railsway here

  step method(:policy)
```

> With `FastTrack()` and the `fast_track: true` options, default outputs will be `Right`, `Left`, `PassFast` and `FailFast` (right diagram). This gives you four possible default outputs.

```ruby
module Memo::Create
  extend Trailblazer::Activity::FastTrack() # we're using the Railsway here

  step method(:policy), fast_track: true
```

When inserting a task via the DSL, everything works identical to the behavior when [adding `Nested` activities](#activity-output-subprocess) except for one thing: Since the DSL can't query a callable Ruby object for its outputs, it defaults the outputs as follows.

In a `Path()`-based activity, the `task` method always adds a `:success` output with a `Right` signal (left diagram).

<img src="/images/output-task.png" >

In a `Railway()` or `FastTrack()` activity, the `step` method adds `:success` and `:failure`. The latter emitting a `Left` signal (middle diagram). With `FastTrack` and the `:fast_track` option, you get up to four outputs predefined (right diagram).

Note that adding `:outputs` to a task doesn't mean they will be connected, it's the DSL's job now to wire those to the next task, unless you [specify the connection explicitly](#activity-output-id).

<!-- @notoc -->
## Output: Subprocess


Activities can be nested. This is usually done with the [`Subprocess` macro](#activity-composition-subprocess) that will automatically define `:outputs` for the nested activity by querying the latter via its `output` method. `Subprocess` assumes that the nested activity follows the [Activity interface](#activity-activity-interface).

Suppose the following `Update::Model` activity needs to be nested into another activity `Update`.

<img src="/images/activity-overview.png" >

```ruby
module Memo::Update
  extend Trailblazer::Activity::Railway()

  step method(:policy)
  step Subprocess( Update::Model )
    #=> defaults:
    # outputs: {
    #   success:            Output{<Update::Right>:success},
    #   failure:            Output{<Update::Left>:failure},
    #   failure_validation: Output{<Update::ValidationErr>:failure_validation},
    # }
end
```

> Non-standard semantics can be re-routed manually.

```ruby
module Memo::Update
  extend Trailblazer::Activity::Railway()

  step method(:policy)
  step Nested( Update::Model ), Output(:failure_validation) => Track(:failure)
end
```


The `Railway()` strategy will now automatically connect outputs with semantics it knows. Note that the `failure.validation` output can't be auto-connected since the semantic is unknown.

<img src="/images/nested-open.png" >

You need to specify that connection manually using `Output(:failure_validation)`. In the example to the right, we let the DSL take care of wiring this output to a specific task, and just say "connect `Update`'s validation failure output to the failure track".

<img src="/images/nested-connected-color.png" >

You now have two outputs going to the same next step, which is actually fine in both BPMN and Trailblazer. It's possible to [rewire by color](#activity-output-color), to a [specific next task]((#activity-output-id)), or to an [existing or new end](#activity-output-end).

<!-- @notoc -->
## Output: Output option

<!-- @notoc -->
## Output: Id
<!-- @notoc -->
## Output: Color
<!-- @notoc -->
## Output: End


### Definition

SomeModule.method(:find)


### Call

## Task Interface

Memo::Find.outputs[:success]
Memo::Find.outputs[:failure]

## Step Interface

## Activity Interface

call
outputs
to_h


## Composition

A main intent of Trailblazer's activities is reusability. As opposed to TRB 1.x, where inheritance was overused, we now encourage compositions. You have two tools to reuse activities with others and compose more complex workflows.

1. The _Merge API_ allows to "copy" activities or parts of it into others and hence merge them.
2. You can use _nesting_ to call acitivies from activities and maintain cleanly encapsulated flows.

## Composition: Merge API

## Composition: Subprocess

To model more complex activities and maximize reusability, a task can be an activity itself. This is called _nesting_, in BPMN, a nested activity is called _Subprocess_.

***When nesting activities, [all mechanics from `Output`](#activity-output) apply, it's just the output _signal_ that is slightly different.***

### Automatic Wiring

> The nested activity is a simple Railway with two ends.

```ruby
<%= snippet :activity, "simple-railway", file: "docs/composition_test.rb" %>
```

> The composer is a Railway as well, and automatically "understands" how to wire the nested's ends.

```ruby
<%= snippet :activity, "simple-composer", file: "docs/composition_test.rb" %>
```

Since all activities expose the [_Task interface_](#activity-task-interface), you can nest by simply providing the contained activity as a task.

When the nested activity doesn't have any custom ends, you can provide the `:outputs` option along with the nested's outputs without any need to manually reconnect. The outer Railway (the container) automatically understands how to connect the nested's ends.

<img src="/images/nested-simple-railway.png">

The automatic wiring of the inner activity works by matching semantics and colors: the inner `:success` end get connected to the `:success` path, the `:failure` end to the `:failure` path of the outer Railway.

### Manual wiring

> By adding two custom ends, the inner activity now has four ends.

```ruby
<%= snippet :activity, "manual-inner", file: "docs/composition_test.rb" %>
```

> You can grab the nested ends' outputs using `outputs[:semantic]` and wire them to custom connections.

```ruby
<%= snippet :activity, "manual-outer", file: "docs/composition_test.rb" %>
```

Let's assume the nested, inner activity `Memo::Find` had three ends, with specific ends to indicate what went wrong, and where (see [End](#activity-end)). These ends have custom semantics `:id_present` and `:model_not_found` and hence can't be connected automatically. You need to manually wire them to other tasks, tracks, or ends.

<img src="/images/nested-manual-ends.png">

Now, all ends from the inner activity have a matching end on the outside. This helps to manage the flow better, but is not always necessary.

### Connect to color

> Instead of using `End`, you can also wire a nested output to a color, e.g. the outer `:failure` track.

```ruby
<%= snippet :activity, "rewire-outer", file: "docs/composition_test.rb" %>
```

Sometimes, you might want to pool multiple inner ends or redirect them onto a track, instead of maintaining one end on the outside for each inner one. In this example, we redirect the `:id_missing` end to the generic `:failure` track.

<img src="/images/nested-rewire.png">

The `:id_missing` end is now connected to the `:failure` track, which happens to run directly into its end. Keep in mind that you can use all [mechanics from `Output()`](#activity-output) and wire nested ends to just anything.

### Subprocess

> Use the `Subprocess()` macro if you want to save typing and take advantage of `Output()`.

```ruby
<%= snippet :activity, "subprocess-outer", file: "docs/composition_test.rb" %>
```

The `activity` gem provides the `Subprocess` macro as a short-cut when nesting activities. It will produce an identical circuit as the one above by automatically extracting and passing `:outputs` to the DSL. You may then [use `Output()` to reference outputs](#activity-output) in a more convenient way, and without having to connect automatically matched ones.

## End

> The `End()` helper in combination with `Output()` connects an output with a newly created end.

```ruby
<%= snippet :activity, "output-end", file: "docs/end_test.rb" %>
```

Outgoing connections from a task can either go to another task, or to an end event. Every strategy comes with one or more default ends, for example `Railway()` has two ends, respectively one with `:success` and one with `:failure` semantic.

The `End()` helper allows you to quickly connect a particular task to a new end.

This is incredibly helpful if further processing doesn't make sense after this task "failed" (or whatever made you choose hitting the new end), and you want to know "what happened". For instance, a policy breach doesn't need to error out generically, but should end in a separate end with a specific semantic (e.g. `:policy_breach`). When running that activity returns the policy breach end, you know the execution stopped after the policy task.

On the right side, check out how to use `End()` with `Output()`.

***!Note that, in order to reference an _existing_ end, you currently have to use an [ID reference](#activity-output-id).***

The respective diagram will have three ends.

<img src="/images/end.png">

## Event

> Always build end instances via the `End` builder.

```ruby
evt = Trailblazer::Activity::End( semantic: :success_story )
```

> The returned signal is `evt` itself.

```ruby
signal, (ctx, flow_options) = evt.( [ctx, flow_options] )
signal #=> #<Trailblazer::Activity::End semantic=:success_story>
```

> Use `Event#to_h` to decompose.

```ruby
evt.to_h #=> { semantic: :success_story }
```


Events are tasks with special semantics.

* `Start` events do nothing, and always return the `Right` signal. Every activity begins with one or multiple start events.
* `End` events usually don't execute anything, either. An end event instance always returns itself as the signal. This allows to wire them to ongoing connections when nesting. End events mark the end of activity paths, and might also be used for suspending an activity as we do [in the `workflow` gem](#workflow).

## Magnetism

## Custom Track

> Use `magnetic_to:` and `Output()` to change the polarizations.

```ruby
<%= snippet :activity, "custom", file: "docs/railway_test.rb" %>
```

All builder strategies (`Path`, `Railway`, etc.) provide defaults for outputs and track "colors". These you can override, which allows to easily branch out custom tracks to handle conditionals or to model polymorphic behavior.

***Remember, [with the Magnetic DSL](#magnetism), tracks are a result of polarizing inputs and outputs.***

The `:magnetic_to` option is an array of polarization colors for the task's inputs (also called _minus pole_) and defines what "open" colors the task will "snap to".

With `Output()`, you map outputs to colors, which is what the coming inputs will "snap to". A tuple of an output and a color is called _plus pole_.

<img src="/images/custom-track.png">

The resulting circuit has three tracks. We didn't put anything on the `:failure` track, but it is still there. Note that, in a `Railway`, mapping the `:success` output does create the desired plus pole. However, the `:failure` output, per default, is still pointing to the `:failure` track and will result in deviation to it should `auth_err` or `reset_counter` return the `Left` signal.

## Path

> The `Path()` helper lets you build a custom track.

```ruby
<%= snippet :activity, "path", file: "docs/railway_test.rb" %>
```

Instead of having to pass around the track color of the [custom track](#activity-custom-track), you can use the `Path()` helper to branch out and build an additional linear flow.

<img src="/images/custom-track.png">

The circuit looks identical to a [custom track](#activity-custom-track).

A path will always end in an end event with a `:success` semantic, which is why the last task is explicitly connected via `End()`. This results in a track end where you define the semantic.

<!-- @notoc -->
## Path: End Semantic

> The `:end_semantic` option allows reusing the default end with a semantic you pick.

```ruby
<%= snippet :activity, "path-end", file: "docs/railway_test.rb" %>
```

The `Path()` helper accepts a `:end_semantic` option to assign a custom semantic.

The circuit looks identical to a [custom track](#activity-custom-track).

## Join

```ruby
<%= snippet :activity, "join", collapse: "methods", file: "docs/path_test.rb" %>
```

An extra path can be joined with the outer activity by pointing the last (or any other) task to an existing task in the outer activity.

<img src="/images/path-join.png" >

Only when `find` returns the `Left` signal, the extra path is taken.
