# Operation

> Example for an operation that doesn't use any TRB macros. It creates a fresh `Memo` instance.

```ruby
class Memo::Operation < Trailblazer::Operation
  step :create_model
  step :validate
  step :save
  step :notify

  def create_model(ctx, **)
    ctx[:model] = Memo.new
  end

  def validate(ctx, params:, **)
    if params[:body].size < 10
      ctx[:errors] = "something wrong with :body"
      return false
    end
  end

  def save(ctx, params:, model:, **)
    model.body = params[:body]
    model.save
  end

  def notify(ctx, model:, **)
    Notifier.(model)
  end
end
```

An operation is the essential element that was introduced with the first Trailblazer book. It indeed is the most popular concept from the TRB architectural style and since has found its way into many other frameworks.

The goal of an operation is to encapsulate all business logic of one feature in an application. Since features (or functions) in web applications are often, very often, mapped to controller actions, sometimes operations are compared to controller actions, orchestrating all logic related to business except for HTTP-related code.

<img src="/images/action-operation.png" >

In particular, this means that neither HTTP code nor rendering is part of an operation.

#### Single Entry Point

> The public `Operation.call` method makes invoking operations really straight-forward.

```ruby
result = Memo::Create.( params: { body: "too short!" } )

result.success?      #=> false
result[:model].body  #=> nil
```

> Usually, operations are called from a controller. For example, in Rails, this could look as follows.

```ruby
class MemosController < ApplicationController
  def create
    result = Memo::Create.( params: params, current_user: current_user )

    return redirect_to "/dashboard" if result.success?
  end
end
```


You can imagine an operation being the single entry point to invoke a function of your application such as creating a memo, viewing a comment, or generating a PDF report. The great thing about this encapsulated asset is that you can use it for different layers of your application.

* Operations are the single entry point in controllers.
* They can also be used in Rake files or CLI tools, and do exactly the same as they'd do in a controller.
* Instead of factories that always create leaky test states, chains of operations are called to produce solid test scenarios that are identical to production environments.

## Operation vs. Activity

In Trailblazer 1.x and 2.0, the `Operation` was the central notion, all was build around it. In Trailblazer 2.1, operations still exist, but they're just one piece in a huge clockwork of activities. In fact, an operation is not more than a extended API around an activity. Internally, it creates, maintains and runs an activity.

You could build a Trailblazer application without using `Trailblazer::Operation`. This especially makes sense when using the `workflow` process engine. However, until all applications are running with workflows, we will keep the operation like a good friend.

The following is different from an activity.

* **INHERITANCE** An operation is a class, not a module. That means, you can use inheritance to derive subclasses. These [will inherit step methods](#operation-inheritance) and activity wirings.
* **STEP DEFINITIONS** Operations provide the `step :some_method` syntax, which in turn allows to define the activity wiring _before_ implementing the methods.
* **CALL API** When invoking an operation using `Create.()`, you have [the "convenient" interface](#operation-call): pass in `:params` and other variables, and the operation will automatically create a `Context` object. This is handy when calling an operation in a controller, or a test, but gets into your way when using an operation in a compound of other activities.
* **RESULT** Also, the operation `call` will return a `Result` object, whereas an activity simply returns following the _circuit interface_.
* **EXTENDED RAILWAY** While activities can choose their DSL strategy, an operation will always be a `FastTrack` railway with four tracks. This has been established in versions before 2.1.
* **MACROS** Most macros are sitting in the `Trailblazer::Operation` namespace, but you can still use them in activities.

## Call

```ruby
my_params = { body: "Awesome!", title: "Eh, hi" }

result = Memo::Create.(
  params:       my_params,
  current_user: User.find(1)
)
```

An operation has a very convenient interface when being used in public. It is invoked with the `call` method and accepts a hash of variables. The passed tuples will automatically be converted into a `Trailblazer::Context` object that is passed through the steps as the `ctx` object.


```ruby
class Memo::Create < Trailblazer::Operation
  step :create_model

  def create_model(ctx, current_user:, **)
    puts ctx[:params]       #=> { body: "Awesome!", title: "Eh, hi" }
    puts ctx[:current_user] #=> #<User name: "Timo">
    puts current_user       #=> #<User name: "Timo">
  end
end
```

***Note that the API has slightly changed for a better: In 2.0, the signature was `call(params, options)`, in 2.1, it is `call(options)` with one hash, only. You have to pass `:params` in this hash***

As always, in the operation's steps, you can use the `ctx` object directly plus keyword arguments. Every step receives the same `ctx` instance.

When `call`ing an operation, a [`Result` object is returned](#operation-result). This is different to the lower-level activity interface, which returns following the _circuit interface_.

***In Trailblazer 2.0, the first step argument was named `options` instead of `ctx`. This is just a convention, though, and we liked `ctx` better.***

The `call` method also accepts containers, such as a `dry-container`. Refer to the [container section](#operation-container) to learn more about injecting additional application dependencies.

## Result

```ruby
result = Memo::Create.( params: params, current_user: User.find(1) )
```

> You can ask about the outcome of the operation via `success?` and `failure?`.

```ruby
result.success? #=> true
result.failure? #=> false
```

> You can query the result object for all variables in `ctx`.

```ruby
result[:model]             #=> #<Memo body="Awesome!">
result["contract.default"] #=> #<Reform::Form ...>
result[:current_user]      #=> #<User id=1>
```

The result object returned from `Operation.call` is a feature of operations, only. It simplifies the API slightly and helps to interpret the outcome of the operation in a convenient way.

The result object is the only way for communicating internals to the outer side, where you, the caller, sits. This is per design: Trailblazer doesn't want you to get the operation instance or any other state, because it will lead to problems.

Whatever is written to the `ctx` object passed from step to step will be readable via the result object. String keys and symbol keys are different. Note that macros, other steps or nested activities might have written to `ctx` as well.

Even though you could change state (or write) on the result object, please treat it as immutable. If you need to pass on transformed state to the rendering layer, [use a decorator object](#cells-decorator).

Again, the interpretation of the outcome is completely up to you. The result object represents what happened, and not what should happen now. For a generic way of [interpreting results, use endpoints](#endpoint).

## DSL

```ruby
<%= snippet :operation, "end", collapse: "methods" %>
```

The operation exposes a minimal DSL to create the underlying activity. An operation always maintains a `FastTrack` activity and hence allows to error out, branch, etc. The operation's DSL is [identical to `Activity::FastTrack`](#activity-fasttrack).

<img src="/images/operation-end.png" >

All semantics are identical, in particular, adding steps works via `step`, `pass` and `fail`. You may use `:pass_fast`, `:fail_fast` and `:fast_track` and leverage four tracks per default.

Note that the step methods do not have to reside in the operation class, you can also use the `Module.method(:find_model)` trick [to compose logic](#activity-FIXME-LINK) in operations.

### ID

```ruby
class Memo::Update < Trailblazer::Operation
  step Finder.method(:find_module), id: "find_module"
  # ...
end
```

The DSL tries to assign valid `:id`s to every step. Make sure to set a good name for steps that you're planning to override in subclasses or when composing: this is part of your public-private API.

Per convention, IDs are `"strings"`.

<!-- :override -->

## Inheritance

## Container

## Testing

> Example of a Minitest operation test.

```ruby
<%= snippet :operation, "describe", file: "docs/operation_test.rb" %>
```

The encapsulated concept of operations, or activities in general, makes them incredibly simple to test. You do exactly the same you would do in a controller: you call them.

By asserting the result object and making sure the side-effects are desired, you create rock-solid components that will do exactly the same in tests and in production. Also, an operation has no idea in what environment its called, allowing you to test it in Minitest, Rspec or whatever testing framework you fancy.

Operations can also be used as factories.

Check out the [`trailblazer-test` gem](#test) for advanced testing strategies, dependency injections instead of mocking, and factory chains.

We're working on an RSpec adapter, too.

## Debugging

### Tracing

### taskWrap

## DSL: Sequence Options

In addition to wiring options, there are a handful of other options known as _sequence options_. They configure where a task goes when inserted, and helps with introspection and tracing.

<!-- @notoc -->
## Sequence Options: id

> Assign names to tasks via the `:id` option, so overriding and debugging is easier.

```ruby
<%= snippet :operation, "id", file: "docs/wiring_test.rb", collapse: "id-methods" %>
```

You can name each step using the `:id` option. Keep in mind that names are part of your public API and should be "forever".

This is advisable when planning to override a step via a module or inheritance or when reconnecting it. Naming also shows up in tracing and introspection. Defaults names are given to steps without the `:id` options, but these might be awkward sometimes.

> IDs can be beneficial for introspection.

```ruby
<%= snippet :operation, "id-inspect", file: "docs/wiring_test.rb" %>
```

<!-- @notoc -->
## Sequence Options: delete

When it's necessary to remove a task, you can use `:delete`.

```ruby
<%= snippet :operation, "delete", file: "docs/wiring_test.rb" %>
```
The `:delete` option can be helpful when using modules or inheritance to build concrete operations from base operations. In this example, a very poor one, the `validate` task gets removed, assuming the `Admin` won't need a validation

```ruby
<%= snippet :operation, "delete-inspect", file: "docs/wiring_test.rb" %>
```

All steps are inherited, then the deletion is applied, as the introspection shows.

<img src="/images/memo-delete.png">

<!-- @notoc -->
## Sequence Options: before

To insert a new task before an existing one, for example in a subclass, use `:before`.

```ruby
<%= snippet :operation, "before", file: "docs/wiring_test.rb", collapse: "before-methods" %>
```
The circuit now yields a new `policy` step before the inherited tasks.

<img src="/images/memo-before.png">

<!-- @notoc -->
## Sequence Options: after

```ruby
<%= snippet :operation, "after", file: "docs/wiring_test.rb", collapse: "after-methods" %>
```

```ruby

<%= snippet :operation, "after-inspect", file: "docs/wiring_test.rb" %>
```
To insert after an existing task, you might have guessed it, use the `:after` option with the exact same semantics as `:before`.

The task is inserted after, as the introspection shows.

<!-- @notoc -->
## Sequence Options: replace

```ruby
<%= snippet :operation, "replace", file: "docs/wiring_test.rb", collapse: "replace-methods" %>
```

```ruby
<%= snippet :operation, "replace-inspect", file: "docs/wiring_test.rb" %>
```

Replacing an existing task is done using `:replace`.

Replacing, obviously, only replaces in the applied class, not in the superclass.

## DSL: Group

The `:group` option is the ideal solution to create template operations, where you declare a basic circuit layout which can then be enriched by subclasses.

```ruby
<%= snippet :operation, "id-inspect", file: "docs/wiring_test.rb" %>
```

```ruby
<%= snippet :operation, "template", file: "docs/doormat_test.rb", collapse: "tmethods" %>
```
The resulting circuit, admittedly rather useless, will look as follows.

<img src="/images/group-template.png">

Subclasses can now insert their actual steps without any sequence options needed.

```ruby
<%= snippet :operation, "template-user", file: "docs/doormat_test.rb", collapse: "meths" %>
```

Since all logging steps defined in the template operation are placed into groups, the concrete steps sit in the middle.

<img src="/images/doormat-before.png">

It is perfectly fine to use the `:group` and other sequence options again, in subclasses. Also, multiple inheritance levels will work.


## Patterns

no god object
only flow control
Orchestration

<!-- @notoc -->
## Recover

```ruby
<%= snippet :operation, "fail-success", file: "docs/wiring_test.rb" %>
```

> The recover tasks themselves can now return a boolean to direct the flow.

```ruby
class Memo::Upload < Trailblazer::Operation
  # ...
  def upload_to_s3(ctx, s3:, file:, **)
    s3.upload_file(file) #=> returns true or false
  end
end
```

Error handlers on the left track are the perfect place to "fix things". This means you might want to return to the right track. We call this a _recover_ task. For example, if you need to upload a file to S3, if that doesn't work, try with Azure, and if that still doesn't play, with Backblaze. This is a [common pattern when dealing with external APIs](https://github.com/trailblazer/trailblazer/issues/190).

You can simply put recover steps on the left track, and wire their `:success` output back to the right track (which the operation knows as `:success`).


The resulting circuit looks as follows.

<img src="/images/recover.png">

The `Output(:success)` DSL call will find the task's `:success`-colored output and connect it to the right (`:success`) track.


<!-- @notoc -->
## Decider

```ruby
<%= snippet :operation, "decider", file: "docs/wiring_test.rb" %>
```

If you want to stay on one path but need to branch-and-return to model a decision, use the decider pattern.

In this example, the success track from `find_model` will go to `update` whereas the `failure` output gets connected to `create`, giving the circuit a diamond-shaped flow.

<img src="/images/decider.png">

Note that we're using properties of the _magnetic_ API here: by polarizing (or _coloring_) the `failure` output of `find_model` to `:create_route` (which is a random name we picked), and making `create` being attracted to that very polarization, the failure output "snaps" to that task automatically.

The cool feature with the magnetic API in this example is that you don't need to know what is the specific target of a connection, allowing to push multiple tasks onto that new `:create_route` track, if you needed that.

<!-- @notoc -->
## Doormat Step

Very often, you want to have one or multiple "last steps" in an operation, for instance to generically log errors or success messages. We call this a _doormat step_.

### Doormat Step: Before

```ruby
<%= snippet :operation, "doormat-before", file: "docs/doormat_test.rb", collapse: "im" %>
```

The most elementary way to achieve this is using the `:before` option.


Note that `:before` is a DSL option and not exactly related to the wiring API. Using this option, the inserted step will be "moved up" as if you had actually called it before the targeted `:before` step.

<img src="/images/doormat-before.png">

### Doormat Step: Group

```ruby
<%= snippet :operation, "doormat-group", file: "docs/doormat_test.rb", collapse: "methods" %>
```

An easier way to place particular steps always into the end section is to use the `:group` option.

The resulting `Memo::Create`'s circuit is identical to the [last example](#doormat-step-before).

Note how this can be used for ["template operations"](#group) where the inherited class really only adds its concrete steps into the existing layout.
