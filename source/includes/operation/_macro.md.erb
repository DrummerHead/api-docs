## Macros

Macros are helper functions that generate steps along with configuration for you. They follow [activity's Macro API](#activity-macro-api). Most macros, such as policies, transaction support, or guards, are provided by the [trailblazer-macro gem](https://trailblazer.to/trailblazer/trailblazer-macro), which is completely optional. Only include it if you want to take advantage of those helpers.

## Wrap

> Steps can be embraced by a `Wrap()`.

```ruby
<%= snippet :macro, "wrap", file: "docs/wrap_test.rb" %>
```

> Any callable object can be handling the actual wrapping logic.

```ruby
<%= snippet :macro, "wrap-handler", file: "docs/wrap_test.rb" %>
```

> If an exception is caught, the `fail!` method produces a `Left` signal that will deviate the flow to the left track, resulting in `notify` not being called and a `failure` end state.

When running one or multiple steps with critical, transactional logic, it is often desirable to wrap this section with a handler. The `Wrap()` macro allows to place steps into any kind of transaction handler that might catch exceptions, lock the database for the duration of the wrapped steps, or wrap a transaction around them.

<img src="/images/wrap.png">

You need to provide a handler which runs the wrapped section and implements the transactional code. The handler can be any callable object (or proc).

***! Make sure to use `Wrap() { ... }` with curly brackets, otherwise Ruby will swallow the block.***

In our example, the `HandleUnsafeProcess.call` method implements the wrapping by putting the execution of the embraced steps into a `begin`/`rescue` construct. Obviously, the implementation of the wrap is completely up to you. Note that the handler's `call` method is invoked with the [task interface](#activity-interfaces-task-interface) plus a `&block` that, when `yield`ed, invokes running the contained steps.

The handler has to return a [task interface return set](#activity-interfaces-task-interface). You're free to use `Railway`'s signal helpers to decide what end you want the wrapped activity to stop in. Do not forget to return other circuit arguments like `flow_options` to keep features such as tracing intact.

***Technically, the wrapped section is a separate activity, where its steps are executed in the outer operation's context. This allows you to rewire the inner ends to differing outer connections.***

### Block Invocation

```ruby
class HandleUnsafeProcess
  def self.call((ctx, flow_options), *, &block)
    begin
      end_event, (ctx, flow_options) = yield # invokes the wrapped activity
    #rescue
    #...
    end
  end
end
```


The block argument passed to the handler can be invoked via `block.call` or a simple `yield`. It runs the wrapped steps and returns a task interface return set if it wasn't interrupted by an exception.

***!The return value of this call is crucial - do not dismiss it, always make sure that a proper task interface return set is returned, even for a successful, uninterrupted invocation.***

### Return set

> You can return any signal from the wrap handler.

```ruby
<%= snippet :macro, "fail-fast-handler", file: "docs/wrap_test.rb" %>
```

The returned value from the handler always has to be a [task interface return set](#activity-interfaces-task-interface). While this might feel cumbersome, it allows you to interpret possible outcomes from the wrapped steps, and communicate different states to the remaining, outer activity via different end events.

For example, by returning a `Railway.fail_fast!` instead of `fail!`, you can deviate the flow to fail fast if an exception happened.

<img src="/images/wrap-fail-fast.png">

Given that the `rescue` block is hit in the `Wrap` activity, the remaining operation will be skipped, and execution will halt in the `fail_fast` end event.

### Transaction

> Your `Wrap()` handler can also deal with transactions.

```ruby
<%= snippet :macro, "transaction-handler", file: "docs/wrap_test.rb" %>
```

> Simply pass your handler into the macro call.

```ruby
<%= snippet :macro, "transaction", file: "docs/wrap_test.rb" %>
```

Obviously, you're not limited to `begin`/`rescue` for `Wrap()`, but can run any transactional code. Often, this macro is used in combination with ActiveRecord's or Sequel's `transaction`.

You need to translate the transaction's return value(s) into a task interface return set.

***In Trailblazer 2.0, you could simply return a boolean. This still works in 2.1, but is deprecated in favor of a more explicit return set.***

### Custom Wiring

> Return any `Signal` subclass from your handler to communicate state.

```ruby
<%= snippet :macro, "custom-handler", file: "docs/wrap_test.rb" %>
```

> Use `Output()` to rewire outputs to new or existing connections.

```ruby
<%= snippet :macro, "custom", file: "docs/wrap_test.rb" %>
```

With `Wrap()` you're not limited to the Railway. You can return a custom signal from your handler, and wire the wrapped outputs to custom connections.

<img src="/images/wrap-custom.png">

Even though this example would never hit the `notify` step, it shows how flexible you can model wrapped sections and map different errors to different ends. It is usually best to let the `:success` end continue on the "right" track, leave the standard `:failure` end connected to the "left" track, and map additional errors to custom `End()`s.

### Tracing

```ruby
<%= snippet :macro, "trace-call", file: "docs/wrap_test.rb" %>
```

```ruby
<%= snippet :macro, "trace-success", file: "docs/wrap_test.rb" %>
```

As always, you can use tracing to track the invocation path, even with `Wrap()`.

Since the wrapped sequence of steps is modelled as a separate activity, tracing will display that section one level indented.

## Rescue

> `Rescue()` will catch the exception classes you provide.

```ruby
<%= snippet :macro, "rescue", file: "docs/rescue_test.rb" %>
```

> The handler is a callable object.

```ruby
<%= snippet :macro, "rescue-handler", file: "docs/rescue_test.rb" %>
```

While you could use the [`Wrap()` macro](#operation-macros-rescue) to catch exceptions and process those, Trailblazer provides the `Rescue()` macro that embraces the calling of the nested activity into a `begin`/`rescue` block and allows to pass in a custom handler in case of an exception.

***! Make sure to use `Rescue() { ... }` with curly brackets, otherwise Ruby will swallow the block.***

You may pass any number of exceptions you desire to catch, along with your `:handler` callable. The handler is called automatically if an exception was raised, it receives the latter as the first positional argument, followed by a task interface signature.

Per default, if the handler was invoked, the operation will deviate to the left track.

***If you do want to take another path, use `Wrap()` and return the signal that suits you. If you think that `Rescue()` should be configurable to return a different signal, [contact us](https://gitter.im/trailblazer/chat). We appreciate your input.***

### Instance method

```ruby
<%= snippet :macro, "rescue-method", file: "docs/rescue_test.rb" %>
```

The handler may also be an instance method on the operation. It has the exact same API than a callable object.

